USE ROLE SYSADMIN;
USE WAREHOUSE SCS;
USE DATABASE SNOWFLAKE_CODE_SAMPLE;
USE SCHEMA PUBLIC;

-- ****************************** 1.- Loading Data ******************************

-- File format
CREATE OR REPLACE FILE FORMAT SNOWFLAKE_CODE_SAMPLE.PUBLIC.FILE_FORMAT_JSON_GENERIC
 TYPE = 'JSON'
 ENABLE_OCTAL = FALSE
 ALLOW_DUPLICATE  = TRUE
 STRIP_OUTER_ARRAY = TRUE
 STRIP_NULL_VALUES = TRUE
 IGNORE_UTF8_ERRORS = FALSE;

-- Stage
CREATE OR REPLACE STAGE SNOWFLAKE_CODE_SAMPLE.PUBLIC.STAGE_EXTERNAL_ACCOUNTS
  URL='s3://snowflake-s3-sfc-demo-ep/accounts/'
  FILE_FORMAT = SNOWFLAKE_CODE_SAMPLE.PUBLIC.FILE_FORMAT_JSON_GENERIC;

LS @SNOWFLAKE_CODE_SAMPLE.PUBLIC.STAGE_EXTERNAL_ACCOUNTS;

-- table
CREATE OR REPLACE TRANSIENT TABLE SNOWFLAKE_CODE_SAMPLE.PUBLIC.ACCOUNTS
  USING TEMPLATE (
    SELECT ARRAY_AGG(object_construct(*))
      FROM TABLE(
        INFER_SCHEMA(
          LOCATION=>'@SNOWFLAKE_CODE_SAMPLE.PUBLIC.STAGE_EXTERNAL_ACCOUNTS/SNOWBANK_PUBLIC_ACCOUNTS_2.json',
          FILE_FORMAT=>'SNOWFLAKE_CODE_SAMPLE.PUBLIC.FILE_FORMAT_JSON_GENERIC'
        )
	)
) ENABLE_SCHEMA_EVOLUTION = TRUE;

DESCRIBE TABLE SNOWFLAKE_CODE_SAMPLE.PUBLIC.ACCOUNTS;

-- loading table
COPY INTO SNOWFLAKE_CODE_SAMPLE.PUBLIC.ACCOUNTS
  FROM @SNOWFLAKE_CODE_SAMPLE.PUBLIC.STAGE_EXTERNAL_ACCOUNTS
  FILE_FORMAT = SNOWFLAKE_CODE_SAMPLE.PUBLIC.FILE_FORMAT_JSON_GENERIC
  MATCH_BY_COLUMN_NAME = CASE_INSENSITIVE
  PATTERN = '.*.json'
  PURGE = FALSE;

-- ****************************** 2.- Querying the Table ******************************
ALTER WAREHOUSE SCS SET WAREHOUSE_SIZE = SMALL;

SELECT * FROM SNOWFLAKE_CODE_SAMPLE.PUBLIC.ACCOUNTS SAMPLE(100);

-- ****************************** 3.- Data Governance ******************************
-- ***** Dynamic Data Masking
USE ROLE SYSADMIN;
USE DATABASE SNOWFLAKE_CODE_SAMPLE;
USE SCHEMA PUBLIC;

-- Create a masking policy that prevents non-administrative users from seeing the actual values in the id column of the account table.
CREATE OR REPLACE MASKING POLICY BALANCE_MASK AS (VAL NUMBER(8,2)) RETURNS NUMBER(8,2) -> 
    CASE
    WHEN CURRENT_ROLE() IN ('SYSADMIN', 'ACCOUNTADMIN') THEN VAL
    ELSE 0.0
END;

-- Apply masking to the account table
ALTER TABLE IF EXISTS SNOWFLAKE_CODE_SAMPLE.PUBLIC.ACCOUNTS MODIFY COLUMN ACCESSIBLE_BALANCE SET MASKING POLICY BALANCE_MASK;
ALTER TABLE IF EXISTS SNOWFLAKE_CODE_SAMPLE.PUBLIC.ACCOUNTS MODIFY COLUMN ACCOUNT_BALANCE SET MASKING POLICY BALANCE_MASK;

-- Test the masking policy
SELECT CURRENT_ROLE();
SELECT * FROM SNOWFLAKE_CODE_SAMPLE.PUBLIC.ACCOUNTS;

USE ROLE ANALYST;
USE WAREHOUSE SCS;
USE DATABASE SNOWFLAKE_CODE_SAMPLE;
USE SCHEMA PUBLIC;
SELECT CURRENT_ROLE();

SELECT * FROM SNOWFLAKE_CODE_SAMPLE.PUBLIC.ACCOUNTS;

-- ***** Row Access Policies
USE ROLE SYSADMIN;
USE DATABASE SNOWFLAKE_CODE_SAMPLE;
CREATE OR REPLACE SCHEMA UTILITIES COMMENT = 'This schema contains utility tables and objects';
USE SCHEMA UTILITIES;

CREATE OR REPLACE TABLE SNOWFLAKE_CODE_SAMPLE.UTILITIES.PRODUCT_CODE_POLICY_MAPPING (
    PRODUCT_CODE    NUMBER(1,0),
    ROLE_NAME       VARCHAR
);

-- Create a row access policy that prevents non-administrative users from seeing the actual values in the PRODUCT_CODE COLUMN of the account table.
INSERT INTO SNOWFLAKE_CODE_SAMPLE.UTILITIES.PRODUCT_CODE_POLICY_MAPPING(PRODUCT_CODE, ROLE_NAME) VALUES
  (1, 'ANALYST'),
  (2, 'ANALYST'),
  (3, 'ANALYST');

SELECT * FROM SNOWFLAKE_CODE_SAMPLE.UTILITIES.PRODUCT_CODE_POLICY_MAPPING;
SELECT DISTINCT PRODUCT_CODE FROM SNOWFLAKE_CODE_SAMPLE.PUBLIC.ACCOUNTS;

-- Creating the row access policy
CREATE OR REPLACE ROW ACCESS POLICY UTILITIES.PRODUCT_CODE_POLICY
AS (PRODUCT_CODE INT) RETURNS BOOLEAN ->
  CURRENT_ROLE() IN ('ACCOUNTADMIN','SYSADMIN')
    OR EXISTS (
      SELECT 1 
      FROM SNOWFLAKE_CODE_SAMPLE.UTILITIES.PRODUCT_CODE_POLICY_MAPPING pcpm
        WHERE ROLE_NAME = CURRENT_ROLE()
        AND pcpm.PRODUCT_CODE = PRODUCT_CODE
    )
;

USE ROLE SYSADMIN;
ALTER TABLE SNOWFLAKE_CODE_SAMPLE.PUBLIC.ACCOUNTS ADD ROW ACCESS POLICY SNOWFLAKE_CODE_SAMPLE.UTILITIES.PRODUCT_CODE_POLICY ON (PRODUCT_CODE);
SELECT CURRENT_ROLE();
SELECT * FROM SNOWFLAKE_CODE_SAMPLE.PUBLIC.ACCOUNTS SAMPLE(100); -- SYSADMIN CAN SEE ALL THE RECORDS
SELECT COUNT(*) FROM SNOWFLAKE_CODE_SAMPLE.PUBLIC.ACCOUNTS; 

-- LETS USE THE ANALYST ROLE
USE ROLE ANALYST;
USE WAREHOUSE SCS;
USE DATABASE SNOWFLAKE_CODE_SAMPLE;
USE SCHEMA PUBLIC;
SELECT CURRENT_ROLE();
SELECT * FROM SNOWFLAKE_CODE_SAMPLE.PUBLIC.ACCOUNTS SAMPLE(100);
SELECT COUNT(*) FROM SNOWFLAKE_CODE_SAMPLE.PUBLIC.ACCOUNTS;

-- ***** Projection policy
--A projection policy is a first-class, schema-level object that defines whether a column can be projected in the output of a SQL query result. A column with a projection policy assigned to it is said to be projection constrained.
USE ROLE SYSADMIN;
USE DATABASE SNOWFLAKE_CODE_SAMPLE;
USE WAREHOUSE SCS;
USE SCHEMA PUBLIC;

CREATE OR REPLACE PROJECTION POLICY PROJECTION_POLICY_ACCOUNT_REGISTER_ACCOUNT
    AS () RETURNS PROJECTION_CONSTRAINT ->
    CASE
    WHEN CURRENT_ROLE() IN ('SYSADMIN', 'ACCOUNTADMIN')
        THEN PROJECTION_CONSTRAINT(ALLOW => true)
    ELSE PROJECTION_CONSTRAINT(ALLOW => false)
END;

ALTER TABLE SNOWFLAKE_CODE_SAMPLE.PUBLIC.ACCOUNTS
 MODIFY COLUMN REGISTERED_ACCOUNT_FLAG
 SET PROJECTION POLICY PROJECTION_POLICY_ACCOUNT_REGISTER_ACCOUNT;

SELECT * FROM SNOWFLAKE_CODE_SAMPLE.PUBLIC.ACCOUNTS SAMPLE(100);

USE ROLE ANALYST;
USE WAREHOUSE SCS;
USE DATABASE SNOWFLAKE_CODE_SAMPLE;
USE SCHEMA PUBLIC;
SELECT * FROM SNOWFLAKE_CODE_SAMPLE.PUBLIC.ACCOUNTS SAMPLE(100);
SELECT * EXCLUDE (REGISTERED_ACCOUNT_FLAG) FROM SNOWFLAKE_CODE_SAMPLE.PUBLIC.ACCOUNTS SAMPLE(100);

SELECT COUNT(*) FROM SNOWFLAKE_CODE_SAMPLE.PUBLIC.ACCOUNTS;

-- ***** Aggreation policy
-- When an aggregation policy is applied to a table, queries against that table must aggregate data into groups of a minimum size in order to return results
USE ROLE SYSADMIN;
USE DATABASE SNOWFLAKE_CODE_SAMPLE;
USE WAREHOUSE SCS;
USE SCHEMA PUBLIC;
ALTER TABLE SNOWFLAKE_CODE_SAMPLE.PUBLIC.ACCOUNTS MODIFY COLUMN REGISTERED_ACCOUNT_FLAG UNSET PROJECTION POLICY;

CREATE AGGREGATION POLICY AGGREGATION_POLICY_ACCOUNT_REGISTER_PLAN_TYPE_CODE
  AS () RETURNS AGGREGATION_CONSTRAINT ->
    CASE
      WHEN CURRENT_ROLE() IN ('SYSADMIN', 'ACCOUNTADMIN')
        THEN NO_AGGREGATION_CONSTRAINT()
      ELSE AGGREGATION_CONSTRAINT(MIN_GROUP_SIZE => 1)
    END;

ALTER TABLE SNOWFLAKE_CODE_SAMPLE.PUBLIC.ACCOUNTS SET AGGREGATION POLICY AGGREGATION_POLICY_ACCOUNT_REGISTER_PLAN_TYPE_CODE;
SELECT * FROM SNOWFLAKE_CODE_SAMPLE.PUBLIC.ACCOUNTS SAMPLE(100);

-- USING ANALYST
USE ROLE ANALYST;
USE WAREHOUSE SCS;
USE DATABASE SNOWFLAKE_CODE_SAMPLE;
USE SCHEMA PUBLIC;
SELECT * FROM SNOWFLAKE_CODE_SAMPLE.PUBLIC.ACCOUNTS SAMPLE(100);

DESC TABLE SNOWFLAKE_CODE_SAMPLE.PUBLIC.ACCOUNTS;

SELECT COUNT(*) FROM SNOWFLAKE_CODE_SAMPLE.PUBLIC.ACCOUNTS SAMPLE(100);

SELECT REGISTERED_PLAN_TYPE_CODE, COUNT(*) FROM SNOWFLAKE_CODE_SAMPLE.PUBLIC.ACCOUNTS GROUP BY REGISTERED_PLAN_TYPE_CODE;

-- ***** Access History
-- UI

-- ***** Data Classification
-- https://docs.snowflake.com/en/user-guide/classify-intro

-- ***** Data Quality
-- https://docs.snowflake.com/LIMITEDACCESS/data-quality/data-quality-intro

-- ****************************** 8.- Cleanup ******************************
USE ROLE SYSADMIN;
ALTER TABLE SNOWFLAKE_CODE_SAMPLE.PUBLIC.ACCOUNTS DROP ALL ROW ACCESS POLICIES;
ALTER TABLE SNOWFLAKE_CODE_SAMPLE.PUBLIC.ACCOUNTS ALTER COLUMN ACCOUNT_BALANCE UNSET MASKING POLICY;
ALTER TABLE SNOWFLAKE_CODE_SAMPLE.PUBLIC.ACCOUNTS ALTER COLUMN ACCESSIBLE_BALANCE UNSET MASKING POLICY;
ALTER TABLE SNOWFLAKE_CODE_SAMPLE.PUBLIC.ACCOUNTS MODIFY COLUMN REGISTERED_ACCOUNT_FLAG UNSET PROJECTION POLICY;
ALTER TABLE SNOWFLAKE_CODE_SAMPLE.PUBLIC.ACCOUNTS UNSET AGGREGATION POLICY;
DROP MASKING POLICY BALANCE_MASK;
DROP ROW ACCESS POLICY UTILITIES.PRODUCT_CODE_POLICY;
DROP PROJECTION POLICY PROJECTION_POLICY_ACCOUNT_REGISTER_ACCOUNT;
DROP AGGREGATION POLICY AGGREGATION_POLICY_ACCOUNT_REGISTER_PLAN_TYPE_CODE;
DROP TABLE IF EXISTS SNOWFLAKE_CODE_SAMPLE.PUBLIC.ACCOUNTS_INTERNAL_RAW;
DROP FILE FORMAT IF EXISTS SNOWFLAKE_CODE_SAMPLE.PUBLIC.FILE_FORMAT_JSON_GENERIC;
DROP STAGE IF EXISTS SNOWFLAKE_CODE_SAMPLE.PUBLIC.STAGE_EXTERNAL_ACCOUNTS;
DROP TABLE IF EXISTS SNOWFLAKE_CODE_SAMPLE.PUBLIC.ACCOUNTS;
DROP SCHEMA IF EXISTS SNOWFLAKE_CODE_SAMPLE.UTILITIES;
