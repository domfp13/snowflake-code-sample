-- Creating a task that orchestrates the entire process
USE ROLE SYSADMIN;
USE WAREHOUSE SCS;
USE DATABASE SNOWFLAKE_CODE_SAMPLE;
USE SCHEMA SNOWFLAKE_CODE_SAMPLE.PUBLIC;

-- Creating a Task that will kick off the process: This is reading from the stage
CREATE OR REPLACE TASK SNOWFLAKE_CODE_SAMPLE.PUBLIC.LOAD_JSON_FILES_TASK
  SCHEDULE = '5 MINUTE'
  -- WAREHOUSE = SNOWFLAKE_CODE_SAMPLE
  ALLOW_OVERLAPPING_EXECUTION = FALSE
  SUSPEND_TASK_AFTER_NUM_FAILURES = 3
  COMMENT = 'Task to load JSON files from the stage into the target table'
  AS
	COPY INTO SNOWFLAKE_CODE_SAMPLE.PUBLIC.ACCOUNTS_SCHEMA_EVOLUTION
	FROM @SNOWFLAKE_CODE_SAMPLE.PUBLIC.JSON_FILES_STAGE
	FILE_FORMAT = SNOWFLAKE_CODE_SAMPLE.PUBLIC.FILE_FORMAT_JSON_GENERIC
	MATCH_BY_COLUMN_NAME = CASE_INSENSITIVE
	PATTERN = '.*.json.gz'
	PURGE = TRUE;

-- Depending on your role you might get an error, if you are using the only user in the account this should have SECONDARY ROLES ENABLED ... RBAC? This is important for managing permissions effectively.

-- Enabling the Task
USE ROLE ACCOUNTADMIN;
GRANT EXECUTE MANAGED TASK ON ACCOUNT TO ROLE SYSADMIN;
GRANT EXECUTE TASK ON ACCOUNT TO ROLE SYSADMIN;

-- Let's try to create the task again
USE ROLE SYSADMIN;
USE WAREHOUSE SCS;
USE DATABASE SNOWFLAKE_CODE_SAMPLE;
USE SCHEMA SNOWFLAKE_CODE_SAMPLE.PUBLIC;

-- Creating a Task that will kick off the process: This is reading from the stage
CREATE OR REPLACE TASK SNOWFLAKE_CODE_SAMPLE.PUBLIC.LOAD_JSON_FILES_TASK
  --USER_TASK_MANAGED_INITIAL_WAREHOUSE_SIZE = 'XSMALL'
  SCHEDULE = '5 MINUTE'
  ALLOW_OVERLAPPING_EXECUTION = FALSE
  SUSPEND_TASK_AFTER_NUM_FAILURES = 3
  COMMENT = 'Task to load JSON files from the stage into the target table'
  AS
	COPY INTO SNOWFLAKE_CODE_SAMPLE.PUBLIC.ACCOUNTS_SCHEMA_EVOLUTION
	FROM @SNOWFLAKE_CODE_SAMPLE.PUBLIC.JSON_FILES_STAGE
	FILE_FORMAT = SNOWFLAKE_CODE_SAMPLE.PUBLIC.FILE_FORMAT_JSON_GENERIC
	MATCH_BY_COLUMN_NAME = CASE_INSENSITIVE
	PATTERN = '.*.json.gz'
	PURGE = TRUE;

-- CREATE A DAG OF TASKS
-- Since we have a stream listening to the ACCOUNTS_SCHEMA_EVOLUTION table loaded via the previus task, we can create another task that will load the data into the silver table
CREATE OR REPLACE TASK SNOWFLAKE_CODE_SAMPLE.PUBLIC.LOAD_ACCOUNTS_SILVER
  USER_TASK_MANAGED_INITIAL_WAREHOUSE_SIZE = 'XSMALL'
  ALLOW_OVERLAPPING_EXECUTION = FALSE
  COMMENT = 'Task to load stream into silver table'
  AFTER SNOWFLAKE_CODE_SAMPLE.PUBLIC.LOAD_JSON_FILES_TASK
  WHEN SYSTEM$STREAM_HAS_DATA('SNOWFLAKE_CODE_SAMPLE.PUBLIC.ACCOUNTS_SCHEMA_EVOLUTION_STREAM')
  AS
	INSERT INTO SNOWFLAKE_CODE_SAMPLE.PUBLIC.ACCOUNTS_SILVER
	SELECT ACCESSIBLE_BALANCE, ACCOUNT_BALANCE, ACCOUNT_STATUS_CODE, ACCOUNT_UID, CDIC_HOLD_STATUS_CODE, CURRENCY_CODE
	FROM SNOWFLAKE_CODE_SAMPLE.PUBLIC.ACCOUNTS_SCHEMA_EVOLUTION_STREAM;

-- LOAD THE JSON FILES INTO THE STAGE
PUT file://////Users/eplata/Developer/snowflake-code-sample/sql/06-advance-sql/SNOWBANK_PUBLIC_ACCOUNTS_4.json @SNOWFLAKE_CODE_SAMPLE.PUBLIC.JSON_FILES_STAGE;
--RM @SNOWFLAKE_CODE_SAMPLE.PUBLIC.JSON_FILES_STAGE/SNOWBANK_PUBLIC_ACCOUNTS_4.json;

LS @SNOWFLAKE_CODE_SAMPLE.PUBLIC.JSON_FILES_STAGE;

-- IMPORTANT: TASK AS ALWAYS INIALLY SUSPENDED, RESUME IS FROM RIGHT TO LEFT
ALTER TASK IF EXISTS SNOWFLAKE_CODE_SAMPLE.PUBLIC.LOAD_ACCOUNTS_SILVER RESUME;
ALTER TASK IF EXISTS SNOWFLAKE_CODE_SAMPLE.PUBLIC.LOAD_JSON_FILES_TASK RESUME;

EXECUTE TASK SNOWFLAKE_CODE_SAMPLE.PUBLIC.LOAD_JSON_FILES_TASK; -- TASK CAN ALSO BE EXECUTED USING THE UI

-- CHECKING THE TASK
SHOW TASKS IN SNOWFLAKE_CODE_SAMPLE.PUBLIC;
LIST @SNOWFLAKE_CODE_SAMPLE.PUBLIC.JSON_FILES_STAGE;

-- CHECK THE TARGET TABLE
SELECT COUNT(*) FROM SNOWFLAKE_CODE_SAMPLE.PUBLIC.ACCOUNTS_SCHEMA_EVOLUTION;
SELECT * FROM SNOWFLAKE_CODE_SAMPLE.PUBLIC.ACCOUNTS_SCHEMA_EVOLUTION;

-- CHECK THE STREAM 
SELECT COUNT(*) FROM SNOWFLAKE_CODE_SAMPLE.PUBLIC.ACCOUNTS_SCHEMA_EVOLUTION_STREAM;

-- CHECK SILVER TABLE
SELECT COUNT(*) FROM SNOWFLAKE_CODE_SAMPLE.PUBLIC.ACCOUNTS_SILVER;

-- ************** CLEAN UP **************
USE ROLE ACCOUNTADMIN;
ALTER TASK IF EXISTS SNOWFLAKE_CODE_SAMPLE.PUBLIC.LOAD_JSON_FILES_TASK SUSPEND;  -- SUSPEND IS FROM LEFT TO RIGHT
ALTER TASK IF EXISTS SNOWFLAKE_CODE_SAMPLE.PUBLIC.LOAD_ACCOUNTS_SILVER SUSPEND;
DROP TASK IF EXISTS SNOWFLAKE_CODE_SAMPLE.PUBLIC.LOAD_JSON_FILES_TASK;
DROP TASK IF EXISTS SNOWFLAKE_CODE_SAMPLE.PUBLIC.LOAD_ACCOUNTS_SILVER;
REVOKE EXECUTE MANAGED TASK ON ACCOUNT FROM ROLE SYSADMIN;
REVOKE EXECUTE TASK ON ACCOUNT FROM ROLE SYSADMIN;
